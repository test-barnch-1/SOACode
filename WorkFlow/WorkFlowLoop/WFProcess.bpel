<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Mon Apr 02 10:56:11 CEST 2012
  Author:  biemonde
  Type: BPEL 2.0 Process
  Purpose: One Way BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="WFProcess"
               targetNamespace="http://xmlns.oracle.com/WorkFlowLoop/WFProcess"
               xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
               xmlns:client="http://xmlns.oracle.com/WorkFlowLoop/WFProcess"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:task="http://xmlns.oracle.com/bpel/workflow/task"
         xmlns:taskservice="http://xmlns.oracle.com/bpel/workflow/taskService"
         xmlns:wfcommon="http://xmlns.oracle.com/bpel/workflow/common"
         xmlns:ns1="http://xmlns.oracle.com/bpel/workflow/TaskEvidenceService"
         xmlns:wf="http://schemas.oracle.com/bpel/extensions/workflow"
         xmlns:ns2="http://xmlns.oracle.com/bpel/workflow/routingSlip">

  <import namespace="http://xmlns.oracle.com/WorkFlowLoop/WFProcess" location="WFProcess.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  --> 
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="wfprocess_client" partnerLinkType="client:WFProcess" myRole="WFProcessProvider"/>
    <partnerLink name="Humantask.TaskService_1"
                 partnerLinkType="taskservice:TaskService"
                 partnerRole="TaskService"
                 myRole="TaskServiceCallbackListener"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="client:WFProcessRequestMessage"/>
    <variable name="continue" type="xsd:boolean"/>
    <variable name="Humantask_globalVariable"
              messageType="taskservice:taskMessage"/>
    <variable name="status" type="xsd:string"/>
    <variable name="firstTimeWF" type="xsd:boolean"/>
    <variable name="initiateTaskResponseMessage"
              messageType="taskservice:initiateTaskResponseMessage"/>
  </variables>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in WFProcess.wsdl) -->
    <receive name="receiveInput" partnerLink="wfprocess_client" portType="client:WFProcess" operation="process" variable="inputVariable" createInstance="yes"/>
    <scope name="Init" exitOnStandardFault="no">
      <sequence name="Sequence1">
        <assign name="AssignInit">
          <copy>
            <from>true()</from>
            <to>$continue</to>
          </copy>
          <copy>
            <from>true()</from>
            <to>$firstTimeWF</to>
          </copy>
          <copy>
            <from>'active'</from>
            <to>$status</to>
          </copy>
        </assign>
      </sequence>
    </scope>
    <scope name="Loop" exitOnStandardFault="no">
      <while name="WhileWFisActive">
        <condition>$continue</condition>
        <sequence>
          <scope name="Humantask"
                 xmlns:wf="http://schemas.oracle.com/bpel/extensions/workflow"
                 wf:key="Humantask_globalVariable">
            <bpelx:annotation>
              <bpelx:pattern patternName="bpelx:workflow"/>
            </bpelx:annotation>
            <variables>
              <variable name="initiateTaskInput"
                        messageType="taskservice:initiateTaskMessage"/>
              <variable name="reinitiateTask_InputVariable"
                        messageType="taskservice:reinitiateTaskMessage"/>
              <variable name="reInvokeHumanTask_reinitiateTask_OutputVariable"
                        messageType="taskservice:reinitiateTaskResponseMessage"/>
            </variables>
            <sequence>
              <if name="IfFirstTime">
                <documentation>Yes</documentation>
                <condition>$firstTimeWF</condition>
                <sequence>
                  <assign name="AssignCustomWF">
                    <copy>
                      <from>$inputVariable.payload/client:taskType</from>
                      <to>$initiateTaskInput.payload/task:task/task:systemMessageAttributes/task:textAttribute1</to>
                    </copy>
                    <copy>
                      <from>$inputVariable.payload/client:assignTo</from>
                      <to>$initiateTaskInput.payload/task:task/task:systemMessageAttributes/task:textAttribute8</to>
                    </copy>
                    <copy>
                      <from>$status</from>
                      <to>$initiateTaskInput.payload/task:task/task:systemMessageAttributes/task:textAttribute2</to>
                    </copy>
                    <copy>
                      <from>xp20:current-dateTime()</from>
                      <to>$initiateTaskInput.payload/task:task/task:systemMessageAttributes/task:dateAttribute1</to>
                    </copy>
                    <copy>
                      <from>$inputVariable.payload/client:lastName</from>
                      <to>$initiateTaskInput.payload/task:task/task:systemMessageAttributes/task:textAttribute3</to>
                    </copy>
                    <copy>
                      <from>$inputVariable.payload/client:refId</from>
                      <to>$initiateTaskInput.payload/task:task/task:systemMessageAttributes/task:numberAttribute1</to>
                    </copy>
                  </assign>
                  <assign name="Humantask_AssignTaskAttributes">
                    <copy>
                      <from>number(3)</from>
                      <to>$initiateTaskInput.payload/task:task/task:priority</to>
                    </copy>
                    <copy>
                      <from>number(3)</from>
                      <to>$initiateTaskInput.payload/task:task/task:priority</to>
                    </copy>
                    <copy>
                      <from>number(3)</from>
                      <to>$initiateTaskInput.payload/task:task/task:priority</to>
                    </copy>
                    <copy>
                      <from><literal><payload xmlns="http://xmlns.oracle.com/bpel/workflow/task">
                      <process xmlns="http://xmlns.oracle.com/WorkFlowLoop/WFProcess"/>
</payload></literal></from>
                      <to>$initiateTaskInput.payload/task:task/task:payload</to>
                    </copy>
                    <copy>
                      <from>$inputVariable.payload</from>
                      <to>$initiateTaskInput.payload/task:task/task:payload/client:process</to>
                    </copy>
                  </assign>
                  <assign name="AssignTimer92Hour">
                    <copy>
                      <from>'PT92H'</from>
                      <to>$initiateTaskInput.payload/task:task/task:systemMessageAttributes/task:textAttribute9</to>
                    </copy>
                  </assign>
                  <invoke name="initiateTask_Humantask"
                          partnerLink="Humantask.TaskService_1"
                          operation="initiateTask"
                          portType="taskservice:TaskService"
                          inputVariable="initiateTaskInput"
                          outputVariable="initiateTaskResponseMessage"/>
                </sequence>
                <else>
                  <if name="IfStatusFinished">
                    <documentation>Ready</documentation>
                    <condition>$status = 'finished'</condition>
                    <sequence name="Sequence3">
                      <assign name="MergePayLoad">
                        <bpelx:annotation>
                          <bpelx:pattern patternName="bpelx:transformation"/>
                        </bpelx:annotation>
                        <copy>
                          <from>ora:doXSLTransformForDoc("xsl/Transformation_MergePayload.xsl", $initiateTaskResponseMessage.payload)</from>
                          <to variable="reinitiateTask_InputVariable"
                              part="payload"/>
                        </copy>
                      </assign>
                      <assign name="AssignCustomWF">
                        <copy>
                          <from>$inputVariable.payload/client:taskType</from>
                          <to>$reinitiateTask_InputVariable.payload/task:task/task:systemMessageAttributes/task:textAttribute1</to>
                        </copy>
                        <copy>
                          <from>$inputVariable.payload/client:assignTo</from>
                          <to>$reinitiateTask_InputVariable.payload/task:task/task:systemMessageAttributes/task:textAttribute8</to>
                        </copy>
                        <copy>
                          <from>$status</from>
                          <to>$reinitiateTask_InputVariable.payload/task:task/task:systemMessageAttributes/task:textAttribute2</to>
                        </copy>
                        <copy>
                          <from>xp20:current-dateTime()</from>
                          <to>$reinitiateTask_InputVariable.payload/task:task/task:systemMessageAttributes/task:dateAttribute1</to>
                        </copy>
                        <copy>
                          <from>$inputVariable.payload/client:lastName</from>
                          <to>$reinitiateTask_InputVariable.payload/task:task/task:systemMessageAttributes/task:textAttribute3</to>
                        </copy>
                        <copy>
                          <from>$inputVariable.payload/client:refId</from>
                          <to>$reinitiateTask_InputVariable.payload/task:task/task:systemMessageAttributes/task:numberAttribute1</to>
                        </copy>
                      </assign>
                      <assign name="AssignTimer60Min">
                        <copy>
                          <from>ora:getPreference('expirationTime')</from>
                          <to>$reinitiateTask_InputVariable.payload/task:task/task:systemMessageAttributes/task:textAttribute9</to>
                        </copy>
                      </assign>
                      <invoke name="reInvokeHumanTask"
                              partnerLink="Humantask.TaskService_1"
                              portType="taskservice:TaskService"
                              operation="reinitiateTask"
                              inputVariable="reinitiateTask_InputVariable"
                              outputVariable="reInvokeHumanTask_reinitiateTask_OutputVariable"
                              bpelx:invokeAsDetail="no"/>
                    </sequence>
                    <else>
                      <documentation>doNothing</documentation>
                      <sequence name="Sequence4">
                        <assign name="AssignContinue">
                          <copy>
                            <from>false()</from>
                            <to>$continue</to>
                          </copy>
                        </assign>
                        <empty name="Empty1"/>
                      </sequence>
                    </else>
                  </if>
                </else>
              </if>
              <receive name="receiveCompletedTask_Humantask"
                       partnerLink="Humantask.TaskService_1"
                       portType="taskservice:TaskServiceCallback"
                       operation="onTaskCompleted"
                       variable="Humantask_globalVariable" createInstance="no"/>
            </sequence>
          </scope>
          <if name="taskIf">
            <documentation>Task outcome is REJECT</documentation>
            <bpelx:annotation>
              <bpelx:pattern patternName="Task outcome is REJECT"/>
            </bpelx:annotation>
            <condition>$Humantask_globalVariable.payload/task:systemAttributes/task:outcome = 'REJECT'</condition>
            <sequence>
              <assign name="AssignContinue">
                <copy>
                  <from>false()</from>
                  <to>$continue</to>
                </copy>
              </assign>
              <empty name="Reject"/>
            </sequence>
            <elseif>
              <documentation>Task outcome is READY</documentation>
              <bpelx:annotation>
                <bpelx:pattern patternName="Task outcome is READY"/>
              </bpelx:annotation>
              <condition>$Humantask_globalVariable.payload/task:systemAttributes/task:outcome = 'READY'</condition>
              <sequence>
                <assign name="AssignStatus">
                  <copy>
                    <from>'finished'</from>
                    <to>$status</to>
                  </copy>
                </assign>
                <empty name="READY"/>
              </sequence>
            </elseif>
            <else>
              <sequence>
                <assign name="AssignContinue">
                  <copy>
                    <from>false()</from>
                    <to>$continue</to>
                  </copy>
                </assign>
                <empty name="Else"/>
              </sequence>
            </else>
          </if>
          <assign name="AssignFirstTime">
            <copy>
              <from>false()</from>
              <to>$firstTimeWF</to>
            </copy>
          </assign>
        </sequence>
      </while>
    </scope>
  </sequence>
</process>